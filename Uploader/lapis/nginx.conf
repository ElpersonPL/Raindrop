worker_processes ${{NUM_WORKERS}};
error_log stderr notice;
daemon off;
pid logs/nginx.pid;
events {
  worker_connections 1024;
}

http {
  include mime.types;
  resolver 127.0.0.11;
  resolver_timeout 10s;
  error_page 404 /static/404.html;
  init_by_lua_block {
    require("lpeg")
    require("socket")
    require("domains")
  }
  init_worker_by_lua_file sessclear.lua;
  
  server {
    listen ${{PORT}};
    server_name _;
    access_log off;
    lua_code_cache ${{CODE_CACHE}};
    client_max_body_size 100M;
    location / {
      set $_url "";
      default_type text/html;
    content_by_lua_block {
        require("lapis").serve("app")
      }
    
	location /files/ {
	 internal;
	}

	location /static/ {
      autoindex on;
    }

  location /proxy {
    internal;
    rewrite_by_lua "
      local req = ngx.req

      for k,v in pairs(req.get_headers()) do
        if k ~= 'content-length' then
          req.clear_header(k)
        end
      end

      if ngx.ctx.headers then
        for k,v in pairs(ngx.ctx.headers) do
          req.set_header(k, v)
        end
      end
    ";
    resolver 1.1.1.1;
    proxy_http_version 1.1;
    proxy_pass $_url;
  }
 
 
 
 }

    

    location /favicon.ico {
      alias static/favicon.ico;
    }
  }
}
